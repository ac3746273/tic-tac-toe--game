// Represents the tic-tac-toe board
const board = [
  ['', '', ''],
  ['', '', ''],
  ['', '', '']
];

// Constants for player and bot symbols
const PLAYER = 'X';
const BOT = 'O';

// Function to check if a player has won
function hasWon(player) {
  // Check rows
  for (let i = 0; i < 3; i++) {
    if (
      board[i][0] === player &&
      board[i][1] === player &&
      board[i][2] === player
    ) {
      return true;
    }
  }

  // Check columns
  for (let j = 0; j < 3; j++) {
    if (
      board[0][j] === player &&
      board[1][j] === player &&
      board[2][j] === player
    ) {
      return true;
    }
  }

  // Check diagonals
  if (
    board[0][0] === player &&
    board[1][1] === player &&
    board[2][2] === player
  ) {
    return true;
  }

  if (
    board[0][2] === player &&
    board[1][1] === player &&
    board[2][0] === player
  ) {
    return true;
  }

  return false;
}

// Function to check if the board is full
function isBoardFull() {
  for (let i = 0; i < 3; i++) {
    for (let j = 0; j < 3; j++) {
      if (board[i][j] === '') {
        return false;
      }
    }
  }
  return true;
}

// Function to evaluate the score of the board
function evaluate() {
  if (hasWon(PLAYER)) {
    return -1;
  } else if (hasWon(BOT)) {
    return 1;
  } else {
    return 0;
  }
}

// Minimax algorithm to find the best move
function minimax(depth, isMaximizingPlayer) {
  const score = evaluate();

  if (score === 1) {
    return score - depth;
  }

  if (score === -1) {
    return score + depth;
  }

  if (isBoardFull()) {
    return 0;
  }

  if (isMaximizingPlayer) {
    let bestScore = -Infinity;

    for (let i = 0; i < 3; i++) {
      for (let j = 0; j < 3; j++) {
        if (board[i][j] === '') {
          board[i][j] = BOT;
          const score = minimax(depth + 1, false);
          board[i][j] = '';
          bestScore = Math.max(score, bestScore);
        }
      }
    }

    return bestScore;
  } else {
    let bestScore = Infinity;

    for (let i = 0; i < 3; i++) {
      for (let j = 0; j < 3; j++) {
        if (board[i][j] === '') {
          board[i][j] = PLAYER;
          const score = minimax(depth + 1, true);
          board[i][j] = '';
          bestScore = Math.min(score, bestScore);
        }
      }
    }

    return bestScore;
  }
}

// Function to make the
